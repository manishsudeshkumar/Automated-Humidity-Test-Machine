#include <mux_shield.h>
#include <SD.h>
#include <LiquidCrystal.h>
#include <SDConfigFile.h>
#include <DHT.h>
#include <SoftwareSerial.h>
#include <stdlib.h>
#include <SD.h>
#include <SPI.h>
#include <DS3231.h>

mux_shield muxShield(USE_PUSHBUTTONS,USE_RMEAS_NOT);//create object of mux_shield with usage of pusbuttons

File myFile;
DS3231  rtc(SDA, SCL);
int j=1;
int settime;
uint32_t tStart;
LiquidCrystal lcd(44,46,28,30,32,34);
int keypad_pin = A8;
int pinCS =53; // Pin 10 on Arduino Uno
float hum[3];
float temp[3];
#define DHT1PIN 22
#define DHT2PIN 23
#define DHT3PIN 25
#define DHT1TYPE DHT22
#define DHT2TYPE DHT22
#define DHT3TYPE DHT22
DHT dht1(DHT1PIN,DHT1TYPE);
DHT dht2(DHT2PIN,DHT2TYPE);
DHT dht3(DHT3PIN,DHT3TYPE);

const int buttonPin = 41;     
int buttonState = 0; 
int keypad_value = 0;

String comando;
float value;
float fina;

const int pinSelectSD = 53; // SD shield Chip Select pin.

// The filename of the configuration file on the SD card
const char CONFIG_FILE[] = "CONFIG.cfg";

boolean didReadConfig;
char *ssid;
char *password;
boolean readConfiguration();
int settime1;
uint32_t period; 

 boolean wifi_connected=false;  //not connected yet...

String apiKey = "E0SV7FKQNLVV9ZAN";

SoftwareSerial mySerial(10, 11); // RX, TX

void setup() {
  pinMode(42, OUTPUT);
 lcd.begin(16,2); 
 Serial.begin(9600);
 mySerial.begin(2400);
 dht1.begin();
 dht2.begin();
 dht3.begin();
 rtc.begin();

 Serial1.begin(9600);
 pinMode(pinCS, OUTPUT);
 pinMode(keypad_pin, INPUT);

 buttonState = digitalRead(buttonPin);

 pinMode(buttonPin, INPUT);

 // reset ESP8266
 Serial1.println("AT+RST");

 pinMode(pinSelectSD, OUTPUT);

 didReadConfig = false;
 ssid = 0;
 password = 0;

 // Setup the SD card 
 Serial.println("Calling SD.begin()...");
 if (!SD.begin(pinSelectSD)) 
 {
   Serial.println("SD.begin() failed. Check: ");
   Serial.println("  card insertion,");
   Serial.println("  SD shield I/O pins and chip select,");
   Serial.println("  card formatting.");
   return; 
 }
 Serial.println("...succeeded.");

 // Read our configuration from the SD card file.
 didReadConfig = readConfiguration();

 for(int i=0;i<5;i++)    //attempt 5 times to connect to wifi - this is a good idea
 {
   if(connectWiFi())  //are we connected?
   {
     wifi_connected = true;  //yes
     break;              //get outta here!
   }
 }
 if (!wifi_connected) connectWiFi();// if not connected connect again
 delay(250);    

}

void loop()
{ 
 lcd.clear();
 lcd.setCursor(0,0);
 lcd.print("Humidity Machine");
 delay(2000);
 lcd.clear(); 
 if(wifi_connected ==true)
 {
 lcd.setCursor(0,0);
 lcd.print("connected to..");
 lcd.setCursor(1,1);
 lcd.print(ssid); 
 delay(2000); 
 }
 if(wifi_connected ==false)
 {
 lcd.clear();
 lcd.setCursor(0,0);
 lcd.print("Not connected ..");
 delay(2000);
 }
 buttonState = digitalRead(buttonPin);
 while(ReadKeypad() !='L')
 {
  lcd.setCursor(0,0);
  lcd.print("Run Time(min):");
  char subbtn= ReadKeypad();
  if (subbtn =='U')
      {
       WaitBtnRelease();
       settime = settime+1;
       lcd.setCursor(14,0);
       lcd.print(settime);
       Serial.println(settime);  
      }
  else if(subbtn == 'D')
   {      
         WaitBtnRelease();
         settime = settime-1;
         lcd.setCursor(14,0);
         lcd.print(settime);
         Serial.println(settime);     
   }
   else if(subbtn == 'S')
   {
    lcd.setCursor(0,1);
    lcd.print("Running..");
    Serial.println(settime); 
    WaitBtnRelease();  
    settime1=settime;
    period = settime1 * 60000L;
    for( tStart = millis();  (millis()-tStart) < period;  )
    {
     if(j == 1)
     {
     hum[j]=dht1.readHumidity();
     temp[j]=dht1.readTemperature();
     Serial.println(j);
     Serial.println(hum[j]);
     Serial.println(temp[j]);
     muxShield.switchToMuxInput(M0);
     delay(2000);
     mySerial.write(51);
     mySerial.write(48);
     mySerial.write(13);
     delay(1000);
     while (mySerial.available()) 
     {
       comando = mySerial.readStringUntil(13);
       comando.trim();
       String stringTwo = comando.substring(0,6);
       value = stringTwo.toFloat();    
       switch (comando.charAt(6))
       {
       case 'M':
           fina = value * 1000000;
           break;
       case 'k':
           fina = value * 1000;
           break;
       case ' ':
           fina = value ;
           break;
       default:
           Serial.println("0");
           break;     
        }
         Serial.println(fina);  
     }
     delay(1000);
     sdlog(); 
     sendtothingspeak1();
     delay(1000);
     j=j+1;
     }
 else if(j == 2)
 {
 hum[j]=dht2.readHumidity();
 temp[j]=dht2.readTemperature();
 Serial.println(j);
 Serial.println(hum[j]);
 Serial.println(temp[j]);
 muxShield.switchToMuxInput(M1);
 delay(2000);
 mySerial.write(51);
 mySerial.write(48);
 mySerial.write(13);
 delay(1000);
 while (mySerial.available()) 
 {
 comando = mySerial.readStringUntil(13);
 comando.trim();
 String stringTwo = comando.substring(0,6);
 value = stringTwo.toFloat();    
 switch (comando.charAt(6))
 {
  case 'M':
           fina = value * 1000000;
           break;
  case 'k':
           fina = value * 1000;
           break;
   case ' ':
           fina = value ;
           break;
   default:
           Serial.println("0");
           break;     
   }
               Serial.println(fina);
}   
 delay(1000);
 sdlog();
 sendtothingspeak2();
 delay(1000);
 j=j+1;
}
 else if(j == 3)
 {  
 hum[j]=dht3.readHumidity();
 temp[j]=dht3.readTemperature();
 Serial.println(j);
 Serial.println(hum[j]);
 Serial.println(temp[j]);
 muxShield.switchToMuxInput(M7);
 delay(2000);
 mySerial.write(51);
 mySerial.write(48);
 mySerial.write(13);
 delay(1000);
 while (mySerial.available()) 
 {
 comando = mySerial.readStringUntil(13);
 comando.trim();
 String stringTwo = comando.substring(0,6);
 value = stringTwo.toFloat();    
 switch (comando.charAt(6))
 {
  case 'M':
           fina = value * 1000000;
           break;
  case 'k':
           fina = value * 1000;
           break;
   case ' ':
           fina = value ;
           break;
   default:
           Serial.println("0");
           break;     
   }
               Serial.println(fina);
}  
 delay(1000);
 sdlog();
 sendtothingspeak3();
 delay(1000);
 j=1;
}
}
////lcd.clear();
////lcd.print("Stopped..");
////delay(1000);
//digitalWrite(42, HIGH);   // turn the LED on (HIGH is the voltage level)
//  delay(1000);              // wait for a second
//  digitalWrite(42, LOW);    // turn the LED off by making the voltage LOW
//  delay(1000);     
}
}
}

 void sdlog()
 {
 Serial.println("writing");
 myFile = SD.open("log_1.txt", FILE_WRITE);
 if (myFile) {   
    Serial.print(rtc.getDateStr());
    myFile.print(rtc.getDateStr()); 
    myFile.print(",");
   myFile.print(rtc.getTimeStr());
   Serial.println("writing on SD");
   myFile.print(",");
   myFile.print(hum[j]);
   myFile.print(",");
   myFile.print(temp[j]);
   myFile.print(",");
   myFile.print(j);
   myFile.print(",");
   myFile.print(fina);
   myFile.println();
   myFile.close(); // close the file
 }
 // if the file didn't open, print an error:
 else {
   Serial.println("error opening test.txt");
 }
 delay(1000); 
 }

void sendtothingspeak1() 
{    
 char buf2[16];
 char buf3[16];
 char buf4[16];
 
 String strTemp  = dtostrf(temp[j], 4, 1, buf2);
 String strHum = dtostrf(hum[j], 4, 1, buf3);
 String strfina = dtostrf(fina, 4, 1, buf4);
 String cmd = "AT+CIPSTART=\"TCP\",\""; // TCP connection
 cmd += "184.106.153.149";             // api.thingspeak.com
 cmd += "\",80";
 Serial1.println(cmd);
 if(Serial1.find("Error")){
   Serial.println("AT+CIPSTART error");
   return;
 }
 String getStr = "GET /update?api_key=";  // prepare GET string
 getStr += apiKey;
 getStr +="&field1=";
 getStr +=String(strHum);
 getStr +="&field2=";
 getStr +=String(strfina);
 getStr +="&field7=";
 getStr += String(strTemp);
  getStr += "\r\n\r\n";
 cmd = "AT+CIPSEND=";  // send data length
 cmd += String(getStr.length());
 Serial1.println(cmd);
 if(Serial1.find(">")){
   Serial1.print(getStr);
   Serial.print(getStr);}
 else{
   Serial1.println("AT+CIPCLOSE");
   Serial.println("AT+CIPCLOSE");
 }
 delay(5000);  // thingspeak needs 15 sec delay between updates
}

void sendtothingspeak2() 
{    
 char buf2[16];
 char buf3[16];
 char buf4[16];
 
 String strTemp  = dtostrf(temp[j], 4, 1, buf2);
 String strHum = dtostrf(hum[j], 4, 1, buf3);
 String strfina = dtostrf(fina, 4, 1, buf4);
 Serial.println(strTemp);
 String cmd = "AT+CIPSTART=\"TCP\",\""; // TCP connection
 cmd += "184.106.153.149";             // api.thingspeak.com
 cmd += "\",80";
 Serial1.println(cmd);
 if(Serial1.find("Error")){
   Serial.println("AT+CIPSTART error");
   return;
 }
 String getStr = "GET /update?api_key=";  // prepare GET string
 getStr += apiKey;
 getStr +="&field3=";
 getStr += String(strHum);
 getStr +="&field4=";
 getStr += String(strfina);
  getStr += "\r\n\r\n";
 cmd = "AT+CIPSEND=";  // send data length
 cmd += String(getStr.length());
 Serial1.println(cmd);
 if(Serial1.find(">")){
   Serial1.print(getStr);
   Serial.print(getStr);}
 else{
   Serial1.println("AT+CIPCLOSE");
   Serial.println("AT+CIPCLOSE");
 }
 delay(5000);  // thingspeak needs 15 sec delay between updates
}

void sendtothingspeak3() 
{    
 char buf2[16];
 char buf3[16];
 char buf4[16];
 
 String strTemp  = dtostrf(temp[j], 4, 1, buf2);
 String strHum = dtostrf(hum[j], 4, 1, buf3);
 String strfina = dtostrf(fina, 4, 1, buf4);

 String cmd = "AT+CIPSTART=\"TCP\",\""; // TCP connection
 cmd += "184.106.153.149";             // api.thingspeak.com
 cmd += "\",80";
 Serial1.println(cmd);
 if(Serial1.find("Error")){
   Serial.println("AT+CIPSTART error");
   return;
 }
 String getStr = "GET /update?api_key=";  // prepare GET string
 getStr += apiKey;
 getStr +="&field5=";
 getStr += String(strHum);
 getStr +="&field6=";
 getStr += String(strfina);
 
  getStr += "\r\n\r\n";
 cmd = "AT+CIPSEND=";  // send data length
 cmd += String(getStr.length());
 Serial1.println(cmd);
 if(Serial1.find(">")){
   Serial1.print(getStr);
   Serial.print(getStr);}
 else{
   Serial1.println("AT+CIPCLOSE");
   Serial.println("AT+CIPCLOSE");
 }
 delay(5000);  // thingspeak needs 15 sec delay between updates
}
boolean connectWiFi()
{
 String cmd="AT+CWJAP=\"";  //form eg: AT+CWJAP= ssid and pass to connect to wifi
 cmd+=ssid;
 cmd+="\",\"";
 cmd+=password;
 cmd+="\"";
 Serial1.println(cmd);
 Serial.println(cmd);
 delay(5000); //give it time to connect to access point
 if(Serial1.find("OK"))  //healthy response therefore connected to wifi
 {
   Serial.println("Connected to WiFi..."); // for debugging of wifi connection
   return true;
 }
 else
 {
   Serial.println("Not connected to WiFi."); // for debugging
   return false;
 }
}



/*
* Read our settings from our SD configuration file.
* Returns true if successful, false if it failed.
*/
boolean readConfiguration() 
{
const uint8_t CONFIG_LINE_LENGTH = 127;

 // The open configuration file.
 SDConfigFile cfg;

 // Open the configuration file.
 if (!cfg.begin(CONFIG_FILE, CONFIG_LINE_LENGTH)) {
   Serial.print("Failed to open configuration file: ");
   Serial.println(CONFIG_FILE);
   return false;
 }

 // Read each setting from the file.
 while (cfg.readNextSetting()) {
   if (cfg.nameIs("ssid")) {
     ssid = cfg.copyValue();

   } else if (cfg.nameIs("password")) {

     password = cfg.copyValue();
     }

 } 

 // clean up
 cfg.end();
}
char ReadKeypad()
{

 keypad_value = analogRead(keypad_pin);

 if(keypad_value < 50)
   return 'R';
 else if(keypad_value < 195)
   return 'U';
 else if(keypad_value < 380)
   return 'D';
 else if(keypad_value < 555)
   return 'L';
 else if(keypad_value < 790)
   return 'S';
 else
   return 'N';

}

void WaitBtnRelease()
{
   while( analogRead(keypad_pin) < 800){}
}
